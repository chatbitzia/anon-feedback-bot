import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler,
    MessageHandler, filters, ConversationHandler
)

TOKEN = "8077961165:AAGOcmrcXYXswfosdH8LMbwf5TLUqmHrIpM"
GROUP_CHAT_ID = -1002801579739

CATEGORY, FEEDBACK = range(2)

logging.basicConfig(level=logging.INFO)

categories = ["–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "–£—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "–ü–æ–∂–µ–ª–∞–Ω–∏—è", "–î—Ä—É–≥–æ–µ"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(
        [[cat] for cat in categories], one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    return CATEGORY

async def category_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ (–æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ):")
    return FEEDBACK

async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = context.user_data.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    feedback = update.message.text
    message = f"üì¨ *–ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤:*\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n*–¢–µ–∫—Å—Ç:* {feedback}"
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message, parse_mode='Markdown')
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category_chosen)],
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
